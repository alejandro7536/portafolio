{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, Optional, Inject, NgModule } from '@angular/core';\nimport * as ɵngcc0 from '@angular/core';\nlet GoogleTagManagerService = /*#__PURE__*/(() => {\n  class GoogleTagManagerService {\n    constructor(config = {\n      id: null\n    }, googleTagManagerId, googleTagManagerAuth, googleTagManagerPreview, googleTagManagerResourcePath, googleTagManagerCSPNonce) {\n      this.config = config;\n      this.googleTagManagerId = googleTagManagerId;\n      this.googleTagManagerAuth = googleTagManagerAuth;\n      this.googleTagManagerPreview = googleTagManagerPreview;\n      this.googleTagManagerResourcePath = googleTagManagerResourcePath;\n      this.googleTagManagerCSPNonce = googleTagManagerCSPNonce;\n      this.isLoaded = false;\n      this.browserGlobals = {\n        windowRef() {\n          return window;\n        },\n        documentRef() {\n          return document;\n        }\n      };\n      if (this.config == null) {\n        this.config = {\n          id: null\n        };\n      }\n      this.config = Object.assign(Object.assign({}, this.config), {\n        id: googleTagManagerId || this.config.id,\n        gtm_auth: googleTagManagerAuth || this.config.gtm_auth,\n        gtm_preview: googleTagManagerPreview || this.config.gtm_preview,\n        gtm_resource_path: googleTagManagerResourcePath || this.config.gtm_resource_path\n      });\n      if (this.config.id == null) {\n        throw new Error('Google tag manager ID not provided.');\n      }\n    }\n    getDataLayer() {\n      const window = this.browserGlobals.windowRef();\n      window.dataLayer = window.dataLayer || [];\n      return window.dataLayer;\n    }\n    pushOnDataLayer(obj) {\n      const dataLayer = this.getDataLayer();\n      dataLayer.push(obj);\n    }\n    addGtmToDom() {\n      return new Promise((resolve, reject) => {\n        if (this.isLoaded) {\n          return resolve(this.isLoaded);\n        }\n        const doc = this.browserGlobals.documentRef();\n        this.pushOnDataLayer({\n          'gtm.start': new Date().getTime(),\n          event: 'gtm.js'\n        });\n        const gtmScript = doc.createElement('script');\n        gtmScript.id = 'GTMscript';\n        gtmScript.async = true;\n        gtmScript.src = this.applyGtmQueryParams(this.config.gtm_resource_path ? this.config.gtm_resource_path : 'https://www.googletagmanager.com/gtm.js');\n        gtmScript.addEventListener('load', () => {\n          return resolve(this.isLoaded = true);\n        });\n        gtmScript.addEventListener('error', () => {\n          return reject(false);\n        });\n        if (this.googleTagManagerCSPNonce) {\n          gtmScript.setAttribute('nonce', this.googleTagManagerCSPNonce);\n        }\n        doc.head.insertBefore(gtmScript, doc.head.firstChild);\n      });\n    }\n    pushTag(item) {\n      return new Promise((resolve, reject) => {\n        if (!this.isLoaded) {\n          this.addGtmToDom().then(() => {\n            this.pushOnDataLayer(item);\n            return resolve();\n          }).catch(() => reject());\n        } else {\n          this.pushOnDataLayer(item);\n          return resolve();\n        }\n      });\n    }\n    applyGtmQueryParams(url) {\n      if (url.indexOf('?') === -1) {\n        url += '?';\n      }\n      return url + Object.keys(this.config).filter(k => this.config[k]).map(k => `${k}=${this.config[k]}`).join('&');\n    }\n  }\n  GoogleTagManagerService.ɵfac = function GoogleTagManagerService_Factory(t) {\n    return new (t || GoogleTagManagerService)(ɵngcc0.ɵɵinject('googleTagManagerConfig', 8), ɵngcc0.ɵɵinject('googleTagManagerId', 8), ɵngcc0.ɵɵinject('googleTagManagerAuth', 8), ɵngcc0.ɵɵinject('googleTagManagerPreview', 8), ɵngcc0.ɵɵinject('googleTagManagerResourcePath', 8), ɵngcc0.ɵɵinject('googleTagManagerCSPNonce', 8));\n  };\n  /** @nocollapse */\n  GoogleTagManagerService.ɵprov = i0.ɵɵdefineInjectable({\n    factory: function GoogleTagManagerService_Factory() {\n      return new GoogleTagManagerService(i0.ɵɵinject(\"googleTagManagerConfig\", 8), i0.ɵɵinject(\"googleTagManagerId\", 8), i0.ɵɵinject(\"googleTagManagerAuth\", 8), i0.ɵɵinject(\"googleTagManagerPreview\", 8), i0.ɵɵinject(\"googleTagManagerResourcePath\", 8), i0.ɵɵinject(\"googleTagManagerCSPNonce\", 8));\n    },\n    token: GoogleTagManagerService,\n    providedIn: \"root\"\n  });\n  /** @nocollapse */\n  return GoogleTagManagerService;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet GoogleTagManagerModule = /*#__PURE__*/(() => {\n  class GoogleTagManagerModule {\n    static forRoot(config) {\n      return {\n        ngModule: GoogleTagManagerModule,\n        providers: [{\n          provide: 'googleTagManagerConfig',\n          useValue: config\n        }]\n      };\n    }\n  }\n  GoogleTagManagerModule.ɵfac = function GoogleTagManagerModule_Factory(t) {\n    return new (t || GoogleTagManagerModule)();\n  };\n  GoogleTagManagerModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: GoogleTagManagerModule\n  });\n  GoogleTagManagerModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({});\n  return GoogleTagManagerModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*\n * Public API Surface of angular-google-tag-manager\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { GoogleTagManagerModule, GoogleTagManagerService };\n\n//# sourceMappingURL=angular-google-tag-manager.js.map","map":null,"metadata":{},"sourceType":"module"}